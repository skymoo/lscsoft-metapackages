stages:
  - generate
  - build
  - test
  - deploy

variables:
  APT_GET: "apt-get -y -o dir::cache::archives=${CI_PROJECT_DIR}/.cache/apt"
  CONDA_BLD_PATH: "${CI_PROJECT_DIR}/conda-bld"
  CONDA_PKGS_DIRS: "${CI_PROJECT_DIR}/.cache/conda"
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
  YUM: "yum --assumeyes --setopt=cachedir=${CI_PROJECT_DIR}/.cache/yum --setopt=keepcache=1"

.apt-cache: &apt-cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .cache/apt

.apt-init: &apt-init
  mkdir -p "${CI_PROJECT_DIR}/.cache/apt/partial" &&
  ${APT_GET} update

.conda-cache: &conda-cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .cache/conda

.pip-cache: &pip-cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .cache/pip

.yum-cache: &yum-cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .cache/yum

lint:yaml:
  <<: *pip-cache
  image: python:alpine
  stage: generate
  before_script:
    - python -m pip install yamllint
  script:
    - yamllint meta/*.yml

generate:
  <<: *pip-cache
  image: python:alpine
  stage: generate
  before_script:
    - python -m pip install python-dateutil jinja2 ruamel.yaml
  script:
    - python tools/generate.py
  artifacts:
    expire_in: 3h
    paths:
      - stage

build:debian:
  <<: *apt-cache
  image: igwn/base:stretch-proposed
  stage: build
  needs:
    - generate
  before_script:
    - *apt-init
    - ${APT_GET} --assume-yes install equivs lintian
  script:
    - for i in stage/*/deb/; do (
          echo "-- $i";
          cd $i;
          equivs-build control
      ); done
    - mkdir debs
    - for i in stage/*/deb/*.deb; do
          echo "-- $i";
          lintian --pedantic $i;
          cp $i debs;
      done
  artifacts:
    expire_in: 3h
    paths:
      - debs

build:rhel:
  <<: *yum-cache
  image: igwn/base:el7-testing
  stage: build
  needs:
    - generate
  before_script:
    - ${YUM} install rpm-build rpmlint
  script:
    - for i in stage/*/rpm/*.spec; do
          rpmlint $i;
          rpmbuild -ba --define "_topdir $CI_PROJECT_DIR/rpmbuild" $i;
      done
    - mkdir rpms srpms
    - mv rpmbuild/RPMS/noarch/*.rpm rpms
    - mv rpmbuild/SRPMS/*.rpm srpms
  artifacts:
    expire_in: 3h
    paths:
      - rpms
      - srpms

build:conda:
  <<: *conda-cache
  image: igwn/base:conda
  stage: build
  needs:
    - generate
  before_script:
    # install dependencies for generate.py, and conda builds
    - conda install --yes
          "python>3.4"
          ruamel.yaml
          networkx
          "conda<4.7.11a0"
          conda-build
          conda-forge-pinning
  script:
    - set -x;
    - for pkg in $(python build-order.py); do
        recipe_dir="stage/${pkg}/conda";
        echo "---------- Processing ${pkg}";
        conda render ${recipe_dir}
            --use-local
            --variant-config-files $(conda info --base)/conda_build_config.yaml;
        conda build ${recipe_dir}
            --error-overlinking
            --error-overdepending
            --no-anaconda-upload
            --use-local
            --variant-config-files $(conda info --base)/conda_build_config.yaml;
      done
  artifacts:
    expire_in: 3h
    paths:
      - conda-bld/noarch
      - conda-bld/linux-64

test:debian:
  <<: *apt-cache
  image: igwn/base:stretch-proposed
  stage: test
  needs:
    - generate
    - build:debian
  before_script:
    - *apt-init
    - ${APT_GET} --assume-yes upgrade
    # setup local apt repository
    - apt-get -y -q install local-apt-repository liblz4-tool
    - mkdir /srv/local-apt-repository
  script:
    # fill our local apt repo and rebuild it
    - cp -v debs/*.deb /srv/local-apt-repository
    - /usr/lib/local-apt-repository/rebuild
    - apt-get -y -q update
    # get the list of metapackages
    - METAPACKAGES=$(lz4cat -d /var/lib/apt/lists/_var_lib_local-apt-repository_._Packages* | grep "^Package:" | awk '{print $2}')
    - echo "Installing metapackages:"; for MPKG in ${METAPACKAGES}; do echo " ${MPKG}"; done
    # install new packages
    - xargs apt-get -y install <<< ${METAPACKAGES}
    # run the tests
    - for testscript in stage/*/deb/test.sh; do
          echo "-- testing $(echo ${testscript} | cut -d\/ -f2)";
          bash ${testscript};
      done

test:rhel:
  <<: *yum-cache
  image: igwn/base:el7-testing
  stage: test
  needs:
    - generate
    - build:rhel
  before_script:
    - ${YUM} clean expire-cache metadata dbcache headers
    - ${YUM} makecache
    - ${YUM} update
  script:
    - ${YUM} localinstall rpms/*.rpm
    - for testscript in stage/*/rpm/test.sh; do
          echo "-- testing $(echo ${testscript} | cut -d\/ -f2)";
          bash ${testscript};
      done

test:conda:
  <<: *conda-cache
  image: igwn/base:conda
  stage: test
  needs:
    - generate
    - build:conda
  before_script:
    - source /opt/conda/etc/profile.d/conda.sh
    - conda install --yes networkx pyyaml
  script:
    - pkglist=$(python build-order.py)
    - conda create --name test --use-local ${pkglist}
    - conda list --name test
    - conda activate test
    - for testscript in stage/*/conda/test.sh; do
          echo "-- testing $(echo ${testscript} | cut -d\/ -f2)";
          bash ${testscript};
      done

docs:
  image: python:3.8
  stage: generate
  needs: []
  before_script:
    - python -m pip install -r docs/requirements.txt
  script:
    - python tools/docs.py meta .
    - mkdocs build --strict --verbose
  artifacts:
    paths:
      - site
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .cache/pip

pages:
  stage: deploy
  needs:
    - docs
  script:
    - mv -v site public
    - find public -type f
  artifacts:
    paths:
      - public
  only:
    - master
