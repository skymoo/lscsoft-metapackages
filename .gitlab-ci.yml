include:
  - project: computing/gitlab-ci-templates
    file:
      - conda.yml
      - debian.yml
      - rhel.yml
      - python.yml

stages:
  - lint
  - generate
  - build
  - test
  - deploy

# -- macros -----------------

.debian:
  # we don't have the personpower to support Debian
  allow_failure: true

.stretch:
  extends: .debian
  image: igwn/base:stretch-proposed

.buster:
  extends: .debian
  image: igwn/base:buster

.bullseye:
  extends: .debian
  image: igwn/base:bullseye

.el7:
  image: igwn/base:el7-testing

.el8:
  image: igwn/base:el8-testing
  allow_failure: true

.conda:
  image: igwn/base:conda

# -- lint -------------------

lint:yaml:
  extends: .python:base
  variables:
    GIT_STRATEGY: fetch
  image: python:alpine
  needs: []
  stage: lint
  before_script:
    - python -m pip install
          yamllint
  script:
    - yamllint meta/*.yml

# -- render metapackages ----

generate:
  extends: .python:base
  variables:
    GIT_STRATEGY: fetch
  image: python:alpine
  stage: generate
  needs: []
  before_script:
    - python -m pip install
          jinja2
          python-dateutil
          ruamel.yaml
  script:
    - python tools/generate.py
  artifacts:
    expire_in: 3h
    paths:
      - stage

# -- build metapackages -----

.build:
  stage: build
  needs:
    - generate
  variables:
    GIT_STRATEGY: none

# -- debian

.build:debian:
  extends:
    - .debian:base
    - .build
  variables:
    LINTIAN_OPTIONS: "--fail-on-warnings"
  script:
    - DIST=${CI_JOB_NAME##*:}
    - apt-get -y -q install
          equivs
          lintian
    - for i in stage/*/${DIST}/; do (
          echo "-- $i";
          cd $i;
          equivs-build control
      ); done
    - mkdir debs
    - set -- ${LINTIAN_OPTIONS}
    - for i in stage/*/${DIST}/*.deb; do
          echo "-- $i";
          lintian --allow-root --pedantic "$@" $i;
          cp $i debs;
      done
  artifacts:
    expire_in: 3h
    paths:
      - debs

build:stretch:
  extends:
    - .build:debian
    - .stretch

build:buster:
  extends:
    - .build:debian
    - .buster

build:bullseye:
  variables:
    LINTIAN_OPTIONS: "--fail-on warning"
  extends:
    - .build:debian
    - .bullseye

# -- rhel

.build:rhel:
  extends:
    - .rhel:base
    - .build
  image: igwn/base:el7-testing
  script:
    - DIST=${CI_JOB_NAME##*:}
    - yum -y -q install
          rpm-build
          rpmlint
    - for i in stage/*/${DIST}/*.spec; do
          rpmlint $i;
          rpmbuild -ba --define "_topdir $CI_PROJECT_DIR/rpmbuild" $i;
      done
    - mkdir rpms srpms
    - mv rpmbuild/RPMS/noarch/*.rpm rpms
    - mv rpmbuild/SRPMS/*.rpm srpms
  artifacts:
    expire_in: 3h
    paths:
      - rpms
      - srpms

build:el7:
  extends:
    - .build:rhel
    - .el7

build:el8:
  extends:
    - .build:rhel
    - .el8

# -- conda

build:conda:
  extends:
    - .conda:base
    - .conda
    - .build
  variables:
    GIT_STRATEGY: fetch
  script:
    # install dependencies for generate.py, and conda builds
    - conda install --yes --quiet
          "python>3.4"
          ruamel.yaml
          networkx
          "conda<4.7.11a0"
          conda-build
          conda-forge-pinning
    - set -x;
    - for pkg in $(python build-order.py); do
          recipe_dir="stage/${pkg}/conda";
          echo "---------- Processing ${pkg}";
          conda render ${recipe_dir}
              --use-local
              --variant-config-files $(conda info --base)/conda_build_config.yaml;
          conda build ${recipe_dir}
              --error-overlinking
              --error-overdepending
              --no-anaconda-upload
              --use-local
              --variant-config-files $(conda info --base)/conda_build_config.yaml;
        done
  artifacts:
    expire_in: 3h
    paths:
      - conda-bld/noarch
      - conda-bld/linux-64

# -- test metapackages ------

.test:
  stage: test
  variables:
    GIT_STRATEGY: fetch

# -- debian

.test:debian:
  extends:
    - .debian:base
    - .test
  script:
    - apt-get -y -q upgrade
    # setup local apt repository
    - apt-get -y -q install local-apt-repository liblz4-tool
    - mkdir /srv/local-apt-repository
    # fill our local apt repo and rebuild it
    - cp -v debs/*.deb /srv/local-apt-repository
    - /usr/lib/local-apt-repository/rebuild
    - apt-get -y -q update
    # get the list of metapackages
    - METAPACKAGES=$(lz4cat -d /var/lib/apt/lists/_var_lib_local-apt-repository_._Packages* | grep "^Package:" | awk '{print $2}')
    - echo "Installing metapackages:"; for MPKG in ${METAPACKAGES}; do echo " ${MPKG}"; done
    # install new packages
    - xargs apt-get -y install <<< ${METAPACKAGES}
    # prepare a virtualenv to support the tests
    - python3 -m venv __test
    - __test/bin/python -m pip install pytest
    # run the tests
    - DIST=${CI_JOB_NAME##*:}
    - __test/bin/python -m pytest -v tools/test.py --script stage/*/${DIST}/test.sh

test:stretch:
  extends:
    - .test:debian
    - .stretch
  needs:
    - generate
    - build:stretch

test:buster:
  extends:
    - .test:debian
    - .buster
  needs:
    - generate
    - build:buster

test:bullseye:
  extends:
    - .test:debian
    - .bullseye
  needs:
    - generate
    - build:bullseye

# -- rhel

.test:rhel:
  extends:
    - .rhel:base
    - .test
  script:
    - yum -y -q clean expire-cache metadata dbcache
    - yum -y -q makecache
    - yum -y -q update
    - yum -y -q localinstall rpms/*.rpm
    # prepare a virtualenv to support the tests
    - python3 -m venv __test
    - __test/bin/python -m pip install pytest
    # run the tests
    - DIST=${CI_JOB_NAME##*:}
    - __test/bin/python -m pytest -v tools/test.py --script stage/*/${DIST}/test.sh

test:el7:
  extends:
    - .test:rhel
    - .el7
  needs:
    - generate
    - build:el7

test:el8:
  extends:
    - .test:rhel
    - .el8
  needs:
    - generate
    - build:el8

# -- conda

test:conda:
  extends:
    - .conda:base
    - .conda
    - .test
  needs:
    - generate
    - build:conda
  script:
    # get list of packages in the local conda-bld repo
    - METAPACKAGES=$(conda search --override-channels --channel local --json | python -c "import json, sys; print('\n'.join(json.load(sys.stdin).keys()))")
    # create a new environment containing the metapackages
    - xargs conda create --name test --use-local <<< ${METAPACKAGES}
    - conda list --name test
    - conda activate test
    # prepare a virtualenv to support the tests
    - python3 -m venv __test
    - __test/bin/python -m pip install pytest
    # run the tests
    - __test/bin/python -m pytest -v tools/test.py --script stage/*/conda/test.sh

# -- docs -------------------

docs:
  extends: .python:mkdocs
  variables:
    GIT_STRATEGY: fetch
  image: python:3.8
  stage: generate
  needs: []
  before_script:
    - python -m pip install -r docs/requirements.txt
  script:
    - python tools/docs.py meta .
    - python -m mkdocs build --strict --verbose

pages:
  stage: deploy
  needs:
    - docs
  script:
    - mv -v site public
    - find public -type f
  artifacts:
    paths:
      - public
  only:
    - master
